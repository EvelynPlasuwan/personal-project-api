// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum EventApprovalStatus {
  PENDING
  COMPLETE
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAIL
}

model Users {
  id             Int                    @id @default(autoincrement())
  username       String
  email          String                 @unique @db.VarChar(255)
  password       String                 @db.VarChar(255)
  profileImage   String?
  createdAt      DateTime               @default(now()) @db.Timestamp(0)
  is_admin       Boolean                @default(false)
  events         Events[]
  booking        Booking[]
  adminApprovals EventApprovalRequest[] @relation("AdminApprovals")

  @@map("users")
}

model Events {
  id                   Int                    @id @default(autoincrement())
  userId               Int
  user                 Users                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  title                String                 @db.VarChar(255)
  description          String                 @db.Text
  eventDate            DateTime
  location             String
  latitude             Float
  longitude            Float
  totalSeats           Int
  ticketPrice          Decimal
  createdAt            DateTime               @default(now()) @db.Timestamp(0)
  updatedAt            DateTime               @updatedAt @db.Timestamp(0)
  eventCategories      EventCategories[]
  eventImages          EventImages[]
  booking              Booking[]
  eventApprovalRequest EventApprovalRequest[]

  @@index([userId])
}

model EventApprovalRequest {
  id              Int                 @id @default(autoincrement())
  eventId         Int
  event           Events              @relation(fields: [eventId], references: [id], onDelete: Cascade)
  status          EventApprovalStatus @default(PENDING)
  requestedAt     DateTime            @default(now()) @db.Timestamp(0)
  approvedAt      DateTime?
  comment         String?
  adminId         Int?
  admin           Users?              @relation("AdminApprovals", fields: [adminId], references: [id])
  rejectionReason String?             @db.Text
  updatedAt       DateTime            @updatedAt

  @@index([eventId])
  @@index([status])
  @@index([adminId])
}

model Categories {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(100)
  description     String            @db.Text
  eventCategories EventCategories[]

  @@index([name])
}

model EventCategories {
  id         Int        @id @default(autoincrement())
  eventId    Int
  event      Events     @relation(fields: [eventId], references: [id])
  categoryId Int
  category   Categories @relation(fields: [categoryId], references: [id])

  @@unique([eventId, categoryId]) //ป้องกันการเพิ่มซ้ำ
}

model EventImages {
  id         Int      @id @default(autoincrement())
  eventId    Int
  event      Events   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  imageUrl   String
  uploadedAt DateTime @default(now())
}

model Booking {
  id            Int           @id @default(autoincrement())
  userId        Int
  user          Users         @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId       Int
  event         Events        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  numberSeats   Int
  createdAt     DateTime      @default(now()) @db.Timestamp(0)
  updatedAt     DateTime      @updatedAt @db.Timestamp(0)
  paymentStatus PaymentStatus @default(PENDING)
  Payment       Payment[]
  expiredAt     DateTime

  @@index([userId, eventId])
  @@index([paymentStatus])
}

model Payment {
  id              Int           @id @default(autoincrement())
  bookingId       Int
  booking         Booking       @relation(fields: [bookingId], references: [id])
  amount          Decimal       @db.Decimal(10, 2)
  paymentStatus   PaymentStatus @default(PENDING)
  transactionDate DateTime      @default(now())

  @@index([paymentStatus, transactionDate])
}
